# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

fastlane_require 'dotenv'

before_all do
  Dotenv.overload '.env'
end

default_platform(:ios)

api_key = app_store_connect_api_key(
   key_id: ENV["ASC_KEY_ID"],
   issuer_id: ENV["ASC_ISSUER_ID"],
   key_content: ENV["ASC_KEY"],
   is_key_content_base64: true,
   in_house: false
 )

keychain_name = ENV['TEMP_KEYCHAIN_USER']
keychain_password = ENV["TEMP_KEYCHAIN_PASSWORD"]

def delete_temp_keychain(name)
  delete_keychain(
    name: name
  ) if File.exist? File.expand_path("~/Library/Keychains/#{name}-db")
end

def create_temp_keychain(name, password)
  create_keychain(
    name: name,
    password: password,
    unlock: false,
    timeout: 0
  )
end

def ensure_temp_keychain(name, password)
  delete_temp_keychain(name)
  create_temp_keychain(name, password)
end

#ENV["FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT"] = "120"


platform :ios do
  lane :release_prod do
    begin
#       preset_key
#       setup_number
#       build_prod
#       upload
      #slack_message
      # slack(
      #   message: "iOS: build completed for v(#{Time.now.strftime("%Y.%m.%d.%H.%M")}). Now uploading to testflight.",
      #   slack_url: https://hooks.slack.com/services/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
      # )
    slack_message
    #delete_temp_keychain(keychain_name)
    rescue => ex
      on_error(ex)
    end
  end

  lane :release_dev do
    preset_key
    setup_number
    build_dev
    upload
  end

  lane :release_staging do
    preset_key
    setup_number
    build_stg
    upload
  end

  lane :preset_key do
    create_keychain(
        name: keychain_name,
        password: keychain_password,
        default_keychain: true,
        unlock: true,
        timeout: 3600,
        lock_when_sleeps: false
        )
    match(git_basic_authorization:ENV["MATCH_GIT_BASIC_AUTHORIZATION"], type: "appstore", readonly: true, keychain_name: keychain_name, keychain_password: keychain_password )
  end

  lane :setup_number do
    increment_build_number(
         build_number: Time.now.strftime("%Y.%m.%d.%H.%M")
        )
  end

  lane :upload do
    upload_to_testflight(api_key: api_key, ipa: "./fastlane/builds/Runner.ipa")
  end

  lane  :build_prod do
    build_app(scheme: "staging",
                export_team_id: CredentialsManager::AppfileConfig.try_fetch_value(:team_id),
                export_options: {
                       method: "app-store",
                       provisioningProfiles: {
                           "com.example.flutterBoilerplateApp" => "flutterBoilerplate"
                       }
                },
                skip_profile_detection: true
      )
  end

  lane  :build_dev do
    build_app(scheme: "dev",
              export_team_id: CredentialsManager::AppfileConfig.try_fetch_value(:team_id),
              export_options: {
                     method: "app-store",
                     provisioningProfiles: {
                         "com.example.flutterBoilerplateApp" => "flutterBoilerplateDev"
                     }
              },
              output_name:"Runner.ipa",
              skip_profile_detection: true
    )
  end

  lane  :build_stg do
    build_app(scheme: "staging",
                export_team_id: CredentialsManager::AppfileConfig.try_fetch_value(:team_id),
                export_options: {
                       method: "app-store",
                       provisioningProfiles: {
                           "com.example.flutterBoilerplateApp" => "flutterBoilerplateStg"
                       }
                },
                output_name:"Runner.ipa",
                skip_profile_detection: true
      )
  end

  lane :slack_message do
    slack(
        message: "New iOS Flutter App Version Announce!",
        payload: {
                'Build Number' => Time.now.strftime("%Y.%m.%d.%H.%M")
              },
        slack_url: "https://hooks.slack.com/services/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"
      )
#     slack(
#           #message: "New FlutterBoilerplate iOS App Version Announce!",
#           #default_payloads: [:git_branch, :last_git_commit_message],
#           message: "iOS: build completed for v(#{Time.now.strftime("%Y.%m.%d.%H.%M")}). Now uploading to testflight.",
#           slack_url: "https://hooks.slack.com/services/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"
#          )
  end

  def on_error(exception)
#      slack(
#          message: "Some thing goes wrong",
#          success: false,
#          slack_url: "https://hooks.slack.com/services/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",
#          attachment_properties: {
#              fields: [
#                  {
#                      title: "Build number",
#                      value: Time.now.strftime("%Y.%m.%d.%H.%M"),
#                  },
#                  {
#                      title: "Error message",
#                      value: exception.to_s,
#                      short: false
#                  }
#              ]
#          }
#      )
  end
end
